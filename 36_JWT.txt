JWT (JSON Web Token)
    
-> As, you know that token are used to authenticate users/give access to the resources in web applications
 
  1️⃣ Definition:
        A JWT (JSON Web Token) is a compact string used to securely pass information between two parties (like a client and a server).
        It’s most often used for authentication — to prove “who you are” after you log in.
        It's defined by the JSON web token standard (RFC 7519). It is compact and self-contained means of transmitting information
        between parties as a JSON object

  2️⃣ Structure
        A JWT has 3 parts, separated by dots (.): header.payload.signature
        ➡️Header – says what type of token it is and what algorithm is used to sign it (e.g., HS256).
        ➡️Payload – contains the actual data (user ID, roles, expiry time, etc.).
        ➡️Signature – a cryptographic signature created by the server to prove the token wasn’t changed.
        ➡️Example (shortened):
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjEyMyIsIm5hbWUiOiJKb2huIn0.XYZ123abc

  3️⃣ Usage:
        After a user logs in, the server creates a JWT and gives it to the client.
        The client saves it (usually in localStorage, sessionStorage, or a cookie).
        They can store user claims, such as User Id, roles, permissions and custom data in a secure and portable format.
        For each request to a protected API, the client sends the token in the Authorization header like:
        Authorization: Bearer <your_jwt>
        The server verifies the signature and expiry — if valid, it processes the request.

  4️⃣ Statelessness:
        JWTs are stateless.
        The server does not store anything about the user session.
        All the needed info is inside the token itself.
        As long as the server has the secret key (or public key) to verify the signature, it can validate any token without looking it up in a database.
        This makes JWTs easy to scale across multiple servers because there’s no shared session store.

  ➡️ Structure of JWT:
            ┌───────────────────────────────────────────────────────────────────────────┐
            │                          JWT Token Structure                              │
            ├───────────────────────────────────────────────────────────────────────────┤
            │ Header (metadata) │ Payload (claims)   │ Signature                        │
            ├───────────────────────────────────────────────────────────────────────────┤
            │ Example:          │ Example:           │ Example:                         │
            │ {                 │ {                  │ HMACSHA256(                      │
            │  "alg": "HS256",  │  "sub": "123456",  │  base64UrlEncode(header) + "." + │
            │  "typ": "JWT"     │  "name": "John",   │   base64UrlEncode(payload),      │
            │ }                 │  "iat": 1516239022 │   secret )                       │
            │ Base64URL encoded │ Base64URL encoded  │ Base64URL encoded signature      │
            ├───────────────────────────────────────────────────────────────────────────┤
            │ Combined token (3 parts separated by dots):                               │
            │       header.payload.signature                                            │
            │ Example:                                                                  │
            │  xxxxx.yyyyy.zzzzz                                                        │
            └───────────────────────────────────────────────────────────────────────────┘
