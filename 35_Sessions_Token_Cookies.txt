Session Tokens and Cookies in Nodejs

-> Session:
    A session is a way to maintain user state and authenticate users in web appplication/
                or
    A session is a way for a web server to maintain state and track a user's activity across multiple pages during a single visit to 
    a website. The Hypertext Transfer Protocol (HTTP), the foundation of the web, is stateless. This means that each request a 
    user makes is treated as an independent event, with no memory of previous requests. 
    Sessions solve this by providing a "memory" for the server.

    1: User authentication:
        When you login into any web application/website to access certain features. Sessions or tokens are used to authenticate users,
        provig that they are who they claim to be. This makes sure only authorized users can access it or can access certain features.
    
    2: Maintaining user state:
        Web apps often needs to track/know user information as they navigate through different pages etc. Sessions or token help maintain
        the user state also. Example: if you add an item in cart in the shopping website, the website needs to remember those items as you
        browse other pages/websites. Sessions/token store this information so that it can be accessed later.
      
    3: Security:
        They also provide security by verifying the identity of users before give them an access, they can also be used to prevent
        session hijacking or cross site request forgery(CSRF) attacks.
    
    4: Personalization and customization:
        They allow web apps to provide personalization experience to the use by storing information abour users's preferences,
         settings, search, themes etc...
    
    5: Scalability:
        They are designed to scale with the size and complexity of the web applications. They provide flexible and efficient way to manage
        user authentication and state even though number of users or requests increase. This help web app to handle growing traffic and users
    
    In summary, session and token are essential components of web development enabling user authentication, maintaining state, ensuring security,
       personalizing experiences, and supporting scalability. They form the foundation of secure and user-friendly web applications that can provide
       personalized and seamless experiences to users.


-> Session based authentication:
    A session is a server-side method of storing user information. When a user logs in, the server creates a session for them and stores data
    like their user ID, login time, and other relevant information on the server itself and this information is mostl likely in JSON format.
    Working:
        1: The user sends a login request to the server.
        2: The server authenticates the users and sends a session to the databases and returns unique session ID (typically in a cookie) to the user's browser.
        3: Now the user send new request with the cookie
        3: The server checks in the db for the ID found in the cookie, if the ID is found it sends the requested page to the user

        Note: The sessionID is the id of the sesssion file(json mostly) which contains user information
        Note: The cookie is also a small file which contains sessionID mostly
    Pros:
        1: Instant Revocation: Admins can immediately invalidate a session, logging a user out instantly. This is a major security benefit
           for sensitive applications like banking.
        2: Data Security: Sensitive data is stored securely on the server, not on the client.
        3: Simple for Monolithic Apps: It's the traditional approach and works well for web applications where the frontend and backend are tightly coupled.
    Cons:
        1: Scalability Issues: Storing sessions for thousands or millions of users on a single server can be resource-intensive. 
           Scaling requires complex setups like shared session databases.
        2: Cross-Domain Problems: Sessions are tied to cookies, which makes them difficult to use across different domains 
          (e.g., an API on a different domain from the main website).

    ->Cookies:
        A cookie is a small piece of data that a website stores on a user's computer or device, they are commonly used on websites to remember information
        about the user browsing activity, preferences and interactions with the site,   

        How cookies work:
            Creation: 