What is Middleware in Node.js?

  Middleware functions are functions that have access to the request (req), response (res), and the next() function 
  in an Express application.

  -> In simple words middleware is like a phase in which many functions execute and whenever all these functions gets executed
     then the response of the request is given back to the user by the server

  -> In Summary middleware is like a series of tasks that happen behind the scenes in an application.
     It's a way to add extra functionality to your application's request-response cycle: such as logging,
     Authentication checks, modifying request data, before it reaches the final destination i.e server

  Example:
    Imagine you're at restaurant and you've placed an order. Now before the order/food reaches your table, it goes through
    several stages in the kitchen. Each stage involves different tasks, like chopping vegetables, cooking and adding spices.
    Middleware is a bit like these stages in the kitchen, it's something that happens in between your request and the final
    response in an application
                       _______________
                      |               |
    ----Request------>|     API       |------Response---->
                      | (Middleware)  |
                      |_______________|

  -> Let's say we want to log every request which is made to our node application:
      Step 1: inside server file here it's myNewServer.js file create a middleware function


  Note: logging means that at which time and date which user enters or you can hit the particular endpoint/ website
        generally its called log request in companies, usually logging is done in every big product and it's an important feature

Example:
  const logRquest=(req,res,next)=>{
  console.log(`[${new Date().toLocaleString()}] Request Made To: ${req.originalUrl}`)
  //Note: the middleware will always call the next(), means that we have executed this function you can move to the next phase, if there is another middleware function
  //you can execute that and if not then do rest of the things like getting data from server etc 
  next()// used for moving on to the next phase
}

/*俱뫮잺 : if we don't call next() in middleware function then it won't go to the next part i.e it won't
 show the response i.e will not go to the server, it will stuck in the middleware,
 try after removig next() in logRequest function, you will see time and url in console but now the response in the screen/postman

 ->In Express.js the next() is the callback function that signal to Express.js that the current middleware function has
 completed its processing and it's time to move on to the next middleware function or route handler in the chain

  -> Understanding next() function diagram:
                         (游릭 = represents a middleware function)
                   | All middleware has access to req,res and next |
                   |                                               |
  -----Request---->|  游릭next()->游릭next()->游릭next()->游릭next()->游릭  |--- Response---> 
                   |                                               |
                   |                                               |


  -> Middleware Stack:
    
                   |                                 |
                   |                                 |
  -----Request---->|  游릭 next()->游릭  next()->   游릭  |--- Response---> 
                   |   |          |              |   |
                       |          |              |   |  
                       |          |              |  
                    Body      Authentication    Router
                    Parser 

        ->If you got to menuRoutes or personRoutes, you can see router their, router is also a third party middleware
        ->Bodyparser is also a middleware
        ->Authentication also
*/

