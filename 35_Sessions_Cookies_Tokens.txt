Session Tokens and Cookies in Nodejs

-> Session:
    A session is a way to maintain user state and authenticate users in web appplication.
                or
    A session is a way for a web server to maintain state and track a user's activity across multiple pages during a single visit to 
    a website. The Hypertext Transfer Protocol (HTTP), the foundation of the web, is stateless. This means that each request a 
    user makes is treated as an independent event, with no memory of previous requests. 
    Sessions solve this by providing a "memory" for the server.

    1: User authentication:
        When you login into any web application/website to access certain features. Sessions or tokens are used to authenticate users,
        provig that they are who they claim to be. This makes sure only authorized users can access it or can access certain features.
    
    2: Maintaining user state:
        Web apps often needs to track/know user information as they navigate through different pages etc. Sessions or token help maintain
        the user state also. Example: if you add an item in cart in the shopping website, the website needs to remember those items as you
        browse other pages/websites. Sessions/token store this information so that it can be accessed later.
      
    3: Security:
        They also provide security by verifying the identity of users before give them an access, they can also be used to prevent
        session hijacking or cross site request forgery(CSRF) attacks.
    
    4: Personalization and customization:
        They allow web apps to provide personalization experience to the use by storing information abour users's preferences,
         settings, search, themes etc...
    
    5: Scalability:
        They are designed to scale with the size and complexity of the web applications. They provide flexible and efficient way to manage
        user authentication and state even though number of users or requests increase. This help web app to handle growing traffic and users
    
    In summary, session and token are essential components of web development enabling user authentication, maintaining state, ensuring security,
       personalizing experiences, and supporting scalability. They form the foundation of secure and user-friendly web applications that can provide
       personalized and seamless experiences to users.


-> Session based authentication:
    A session is a server-side method of storing user information. When a user logs in, the server creates a session for them and stores data
    like their user ID, login time, and other relevant information on the server itself and this information is mostl likely in JSON format.
    Working:
        1: The user sends a login request to the server.
        2: The server authenticates the users and sends a session to the databases and returns unique session ID (typically in a cookie) to the user's browser.
        3: Now the user send new request with the cookie
        3: The server checks in the db for the ID found in the cookie, if the ID is found it sends the requested page to the user

        Note: The sessionID is the id of the sesssion file(json mostly) which contains user information
        Note: The cookie is also a small file which contains sessionID mostly
    Pros:
        1: Instant Revocation: Admins can immediately invalidate a session, logging a user out instantly. This is a major security benefit
           for sensitive applications like banking.
        2: Data Security: Sensitive data is stored securely on the server, not on the client.
        3: Simple for Monolithic Apps: It's the traditional approach and works well for web applications where the frontend and backend are tightly coupled.
    Cons:
        1: Scalability Issues: Storing sessions for thousands or millions of users on a single server can be resource-intensive. 
           Scaling requires complex setups like shared session databases.
        2: Cross-Domain Problems: Sessions are tied to cookies, which makes them difficult to use across different domains 
          (e.g., an API on a different domain from the main website).


    Client (Browser) --------> Server (Login Endpoint) --------> Database (User credentials)
       |                          |                                |
   sends login creds       verifies user/pass               checks credentials
       |                          |                                |
       | <------------------------|                                |
 receives Set-Cookie header  creates session ID           stores session ID mapped to user
 (session ID stored in cookie)

    (Next request)
    Client (Browser) --------> Server (Any protected route)
        |                          |
    sends request + cookie       reads session ID from cookie,
    (session ID)                 validates with DB/session store
        |                          |
        | <------------------------|
    receives response if session is valid

    Here in diagram:
    User logs in → credentials go to Server.
    Server checks credentials with Database.
    If valid, server generates a session ID, stores it in DB/session store, and sends a cookie with that ID to the client.
    On every next request, the Client automatically sends that cookie.
    Server checks the session ID → if valid, user is authenticated.



    ->Cookies:
        A cookie is a small piece of data that a website stores on a user's computer or device, they are commonly used on websites to remember information
        about the user browsing activity, preferences and interactions with the site,   

        How cookies work:
            Creation: Webhen you visit any website for the first time, they website may send a small text file (the cookie) to your browser.
                      (we often first get a notification to allow cookies to your browser)
            Storage: Your browser stores cookie on your computer/device. Each cookie is associated with the specific website and contains information such as
                     unique identifier and any data that the website wants to remember about you.
            Sending with requests: When you revisit the website or navigate to the different pages,
                                   your browser automatically includes the cookie in the HTTP requests it sends to ther website's server.
            Server Processing: The website's server receives the cookie along with the request, it can then read the cookie to retrieve the stored information about you.
            Usage: Websites use cookies for various purposes, such as remembering your login status, storing your preferences, settings, tracking your activities for
                   analytics purposes and personalizing your browser experience.

    ->Types of Cookies:
        1)Session Cookies: These cookies are temporary and are deleted when you close the browser. The are often used for maintining 
                           your login state during a browsing session.
        2)Persistent Cookies: These cookies are stored on your device for a specified duration, even after your close your browser.
                              They can be used for purposes such as remembering your preferences or login information across multiple
                              visits to a website.

    ->Privacy and Security:
        Cookies can raise privacy concerns because they can be used to track user's browsing behaviour across different websites.
        However, cookies cannot execute code or transmit virsus, and they can only store information that the webite itself provides.
        they can also be used to show you ads based on your activity.

    Note: In private mode the cookies are session cookies and in normal browsing they are presistent

    In Summary: Cookies are small text files stored on your computer by the website your visit. They help websites to remember informationa about
                you and enhance your browsing experience. They are used to maintain login status, and tracking your preferences.
                While cookies are an essential part of web functionality, they also raise privacy considerations, and users can manage
                their cookie settings in their web browser

-> Client Storage Options:
    1)Cookies, 2)Local Storage, 3)Session Storage

    1) Cookies:
        Small pieces of data stored on the client (browser) by the server.
        Sent automatically with every HTTP request to the same domain.
        Typically used for authentication, user preferences, and tracking.
        Commonly used to store session IDs or authentication tokens
        Size limit ~4KB.

    2) Local Storage:
        A browser storage mechanism that allows you to store key-value data locally.
        Data persists even after the browser is closed and reopened (until explicitly cleared).
        Not sent to the server automatically.
        Size limit ~5–10MB depending on the browser.

    3) Session Storage:
        Similar to Local Storage but tied to a single browser session.
        Data is cleared automatically when the tab or browser is closed.
        Not sent to the server automatically.
        Used to store data temporary or for maintaining a state within a single browsing session
        Size limit ~5MB depending on the browser.

-> Token based authentication:
    A token is an authorization file that we can not tempared(change) with. It is generated by the server using a secret key
    It is send to the user and is stored in their local storage, Like cookies the user send this token to the server with every request,
    so the server can verify its signature and authorize the requests
      or
    A token (most commonly a JSON Web Token or JWT) is a self-contained credential that the server gives to the client. 
    This token holds all the necessary user information.

    Working:
        1)User sends login request to the server.
        2)The server authorizes the user and send back the token to the user
        3)Now user send the new request with the token
        4)The server will check if the token is valid or not and if the token is valid the server sends the requested pages to the user
     

     Client (Browser/App) --------> Server (Login Endpoint) --------> Database (User credentials)
        |                           |                                |
   sends login creds          verifies user/pass               checks credentials
        |                           |                                |
        | <-------------------------|                                |
 receives token (JWT)         creates signed JWT token          (no session storage needed)
 (stored by client)

    (Next request)
    Client (Browser/App) --------------------------------> Server (Any protected route)
            |                                                         |
    sends request + Authorization: Bearer <JWT> header                |
                                                          verifies JWT signature & expiry
            | <-------------------------------------------------------|
    receives response if token is valid

    How it flows:
        User logs in → credentials go to Server.
        Server checks credentials with Database.
        If valid, Server generates a JWT (signed token) and returns it to the client.
        Client stores the JWT (localStorage, sessionStorage, or memory).
        On every next request, Client sends the JWT in the Authorization header.
        Server validates the token signature & expiry → if valid, user is authenticated.

    Pros:
        Scalability: The stateless nature means the server doesn't have to manage session data, making it easy to scale 
                     across multiple servers and services.
        Cross-Domain Compatibility: Tokens are sent in the HTTP Authorization header, making them ideal for modern architectures 
                                    like microservices and APIs that serve multiple clients (web, mobile apps, etc.).
        Performance: There's no server-side lookup required for each request, which can be faster.
    Cons:
        No Instant Revocation: A major drawback is that a token can't be instantly invalidated. Once issued, 
                               it remains valid until its expiration time.
        Token Size: Since tokens are self-contained, they can be larger than a simple session ID, increasing the size of each request.
        Client Security Risk: If not stored securely on the client, a stolen token can be used by an attacker until it expires.

->Difference between Session and Token:
    1. State on the Server
        Session – Server keeps session data (stateful).
        Token – Server keeps no session data; the token carries user info (stateless).

    2. What the Client Stores
        Session – A small session ID inside a cookie.
        Token – The entire signed token (JWT) in localStorage, sessionStorage or a cookie.

    3. How the Server Validates
        Session – Looks up the session ID in its session store/DB on every request.
        Token – Verifies token’s signature and expiry; no DB lookup needed.

    4. Scalability
        Session – Harder to scale; session data must be shared between servers.
        Token – Easier to scale; each server can verify tokens independently.

    5. Revoking Access
        Session – Easy; delete the session from the server store.
        Token – Harder; need token blacklist or wait until it expires.

    6. Typical Usage
        Session – Traditional web apps with server-rendered pages.
        Token – APIs, SPAs, and mobile apps.
